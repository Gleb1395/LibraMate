import os

import django
import telebot
from dotenv import load_dotenv
from telebot import types

from config import settings

load_dotenv()
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()
from django.contrib.auth import get_user_model  # NOQA E402

from borrowing.models import Borrowing  # NOQA E402

token = settings.TELEGRAM_TOKEN
if token is None:
    token = "123456:dummy"

bot = telebot.TeleBot(token)


@bot.message_handler(commands=["start"])
def start_handler(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button_contact = types.KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    button_ticket = types.KeyboardButton(text="–ú–æ—ó –∫–Ω–∏–≥–∏")
    keyboard.add(button_contact, button_ticket)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±—ñ–±–ª—ñ–æ—Ç–µ—á–Ω–∏–π –±–æ—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å üìö\n\n"  # NOQA E402
        "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω–∏ ‚Äú–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç‚Äù, —â–æ–± –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç\n"  # NOQA E402
        "2Ô∏è‚É£ –ò–ª–∏ '–ú–æ—ó –∫–Ω–∏–≥–∏', —è–∫—â–æ —Ç–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–≤ –∫–æ–Ω—Ç–∞–∫—Ç —Ä–∞–Ω—ñ—à–µ\n —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —â–æ —Ç–∏ –≤–∑—è–≤ —ñ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏",  # NOQA E402
        reply_markup=keyboard,
    )


@bot.message_handler(content_types=["contact"])
def contact_handler(message):
    if message.contact:
        phone_number = message.contact.phone_number
        try:
            user = get_user_model().objects.get(phone=phone_number)
            bot.send_message(message.chat.id, f"–î—è–∫—É—é, {user.email}! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–π–Ω—è—Ç–æ.")
            user.telegram_chat_id = message.chat.id
            user.save()
        except get_user_model().DoesNotExist:
            bot.send_message(message.chat.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")


@bot.message_handler(func=lambda message: message.text == "–ú–æ—ó –∫–Ω–∏–≥–∏")
def get_ticket_handler(message):
    try:
        user = get_user_model().objects.get(telegram_chat_id=message.chat.id)
    except get_user_model().DoesNotExist:
        bot.send_message(
            message.chat.id,
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.",
        )
        return
    borrowing_books = Borrowing.objects.filter(user=user)
    if not borrowing_books.exists():
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–∏—Ö –∫–Ω–∏–≥.")
        return

    message_text = "üìö –í–∞—à—ñ –∫–Ω–∏–≥–∏:\n\n"
    for borrowing in borrowing_books:
        message_text += (
            f"{borrowing.book.title} ‚Äî {borrowing.book.author}\n"
            f"–î–∞—Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è: {borrowing.expected_return_date.strftime('%d.%m.%Y')}\n\n"
        )

    bot.send_message(message.chat.id, message_text)


if __name__ == "__main__":
    bot.polling(none_stop=True)
